
# coding: utf-8

# In[11]:


import numpy as np
import time
import random as ran
import sys


# In[5]:


def find_nth(haystack, needle, n):
    start = haystack.find(needle)
    while start >= 0 and n > 1:
        start = haystack.find(needle, start+len(needle))
        n -= 1
    return start


# In[13]:


testing_data_path = sys.argv[1]
output_file_path  = sys.argv[2]


# In[6]:


te=open(testing_data_path,"r",encoding="BIG5")
test=te.read()
test=test.replace("NR",'0')
test1=test.split("\n")
test2=[]
for i in range(len(test1)):
    test1[0]=test1[0].split(",")
    if i<18:
        test2.append(test1.pop(0)[2:])
    else:
        test2[i%18]=test2[i%18]+test1.pop(0)[2:]
for i in range(18):
    for n in range(len(test2[i])):
        test2[i][n]=float(test2[i][n])
x2=np.zeros((240,182))
for i in range(240):
    co=0
    stdpm=np.zeros(0)
    cp=0
    for n in range(162):
        x2[i][n]=test2[n%18][co]
        if n%18==15:
            x2[i][n]=np.cos(test2[n%18][co]/180*3.14159265359)*test2[n%18+1][co]
            x2[i][164+cp]=np.sin(test2[n%18][co]/180*3.14159265359)*test2[n%18+1][co]
            cp+=1
            
        if n%18==17:
            co+=1
        if n%18==9:
            x2[i][173+co]=np.power(test2[n%18][co],2)
            stdpm=np.append(stdpm,test2[n%18][co])
    x2[i][162]=np.std(stdpm)
    x2[i][163]=np.mean(stdpm)
    for n in range(18):
        for p in range(9):
            test2[n].pop(0)
x2lb=[]
x2ls=[]
for i in range(240):
    x2lb.append(0)
    x2ls.append(0)
    if x2[i][163]>18.5:
        x2lb[i]=x2[i]
    else:
        x2ls[i]=x2[i]
x2b=np.asarray(x2lb)
x2s=np.asarray(x2ls)


# In[7]:


bb=4.722923778685119
bs=1.5168812166879977
wb=[-0.005115120816764554, 0.11907070515448472, -0.1468391838707484, -0.5772353935558664, -0.09124622821202633, -0.035809573068521165, 0.04708791961338472, -0.03619724427315363, 0.02471294551442997, 0.016531607092573845, -0.3939560592282149, -0.01344946160628554, -0.26910863249096023, 0.45404309865361525, -0.00201232813159277, 0.045917486962154856, -0.0956153511779671, -0.04491547015619658, -0.006168345856402852, 0.22211477526873546, 0.11405618023995463, -0.4030932620195203, 0.020160118356414503, -0.08205489158209191, 0.026574596708911782, 0.04602227776674246, -0.005895636995343795, 0.057306590942421604, -0.05029610023845203, 0.01708765309484035, 0.2496905616783866, 0.2890641840210116, 0.004452591776601917, -0.054314696639263096, -0.27712867822363246, 0.024058219674632043, -0.011281280638245088, 0.23875644723344888, -0.06471168699415057, -0.2628024658408685, 0.3155088909545168, 0.15122972211600383, -0.2108027232219987, -0.0403255870932424, -0.028621425721818992, 0.1403714805425503, -0.19879880430082192, 0.01318788984744356, -0.056880340720734196, 0.3473690567750062, 0.0008208027903689719, -0.09924268717949601, -0.1370926233248769, -0.09585048252870898, -0.047088855501154464, 0.21756579173126372, -0.0635423916165411, -0.34288607839008123, 0.317432654430773, 0.12817764925404387, -0.2327262885743823, 0.010894564231014984, 0.060584472621397795, -0.017375999609671497, 0.17045927922666004, -0.03716181677703401, 0.07139766829517424, 0.35762952228051903, 0.0002472589358428574, 0.08701310410982427, -0.15989701227731853, 0.13824986270780948, -0.0007246874409308908, 0.32087086455839475, 0.34805984131412865, -0.14535938199155418, -0.2142546706648008, 0.029384498398684785, 0.05662993686174978, -0.027063959702352765, -0.0427666188274669, 0.08333822083820705, -0.25325609698860946, -0.03240095279461891, -0.10784697311697668, 0.3081215570637061, 0.0009676853235577672, 0.2370110110227344, -0.20290878136225163, 0.16794785073153332, -0.058594147323731624, 0.24178369244862088, -0.09979726069017836, -0.05268765208402515, -0.1776201437742804, -0.040604346731263743, 0.04334444548908595, 0.021381724104025248, -0.030180081641754467, 0.00660692106964473, -0.06657505922336578, 0.049505638431991905, 0.10556573326666727, 0.3154383676137336, -0.0011016170263805558, -0.12634588980445258, -0.10954008878572938, 0.19124363850214682, 0.13503628847888363, 0.2022092718975232, -0.6118986524832237, -0.4182103500079671, 0.11307733987132099, -0.038027510173575155, -0.07104903218652539, -0.06940719281023466, 0.05680783052059114, 0.0836587486843255, 0.0006154986111962535, -0.17632169072458953, -0.17928530273055668, 0.08219933337993826, -0.0026335210153981105, -0.18424385296508325, -0.3062843368410125, -0.09242389919188829, -0.037082224381587356, 0.28177516307812295, -0.019797168245042816, -0.14189605644754555, 0.2120400824542029, -0.12182086213336706, 0.03031798228739764, 0.0015302809470055375, -0.02550406316774863, 0.18963649151562403, -0.21009714597438572, 0.058243872990067454, 0.16930195521231603, 0.19502663107141777, 0.003085835256828408, -0.210847330124287, -0.338095325084812, -0.23473529640911786, 0.005813883023956468, 0.24172902216074105, 1.58259146696976, 0.3933302382150616, -0.1791838609829582, 0.10961178440858226, 0.12465022564164922, 0.07989239612027983, 0.05478370281577096, 0.633475983111719, -0.25736369934693476, 0.03919414695441459, 0.18703803232741373, 0.19811189704449544, 0.0019902252939969682, -0.24030409039564563, -0.10291698886429534, 0.011192954988459654, -0.02133817867878426, -0.4932806024262553, -0.012543716370446314, 0.026215352063644812, -0.05430853004496228, 0.09340390874084596, 0.012552787448143513, -0.1183425346796016, 0.07782295452389537, 0.16636613193505584, -0.09719863703131415, -0.0002537275909006555, 0.0001820531099872988, 0.0009614045400732853, -0.0013393778620063666, -3.4397999691259294e-05, 0.004888741407103199, -0.006208601898714881, -0.0006632815514274706, 0.0038418481798002772]
ws=[-0.04376142058131762, -0.1912004161974959, 0.2042487103556311, 0.3134756146853352, -0.012395592523917424, -0.06626099394439496, 0.10070531349675245, 0.03546522905787243, -0.002046537186675713, 0.004462100816457426, 0.02661060802596416, 0.017782021930076747, -0.16029322393695716, -0.14621126285039446, 0.0001342798012022427, -0.10739955453219045, -0.17853740566785145, -0.1335535442411619, -0.012264204099802898, -0.15431446497438184, -0.05141103227758916, -0.23884087572474808, -0.05182529601036338, 0.028563245114308456, -0.006226711337741213, 0.011292230745615755, 0.014486450517011619, -0.014091340978040247, 0.0012892136773897651, -0.013777762413209228, 0.14586714386204844, -0.16058999323025172, 0.0017403198451370577, -0.12148414278393738, -0.0021996041297741103, 0.06529075039830608, 0.029371298025306983, -0.07933302645616201, 0.2932142568993555, -1.4219789667131486, 0.052879458330732744, -0.136792967996393, 0.02928313524279458, -0.07340581479838633, -0.02622176333014093, 0.08976279880974218, -0.02548913882078355, -0.025030417624796082, 0.05357896485141587, -0.05899031973139452, -0.001186435627758654, -0.03336816660950545, 0.24003591954324394, -0.10101738676179972, -0.019678284719000735, -0.057634784980588286, -0.09143018225382575, -0.769462779103581, 0.06722817104766839, 0.008958830079341123, -0.0017466281636149801, 0.012046633384955496, 0.028880061067685786, -0.2701024075504161, -0.023876159487552777, 0.01876744399400401, -0.01936503922418447, -0.22051152601908913, 0.0017241143625231713, 0.11673773761226135, 0.0710507953807142, -0.21670981116625104, 0.04155395246171072, -0.12275173116990165, 1.0752995525381122, 0.8861595879432859, 0.02946413985520816, -0.013490409221549645, 0.007938558526849632, 0.025323461864756897, 0.007141502195262959, 0.052127025418614095, -0.04162083642584086, -0.023719352472225272, -0.0486200894660927, 0.003376110146687658, -0.0008235285817378752, 0.03661707265915795, -0.0643420379761713, -0.08902567172033127, 0.031242006961204966, 0.1685542573667003, 0.10472343421702304, -1.3305806238965783, -0.0782494259170481, -0.003037477714760208, 0.02300603047040692, -0.05913627442048116, -0.029803817277495353, 0.4415762740008166, 0.030539987410403476, 0.019758484879376315, 0.016086539310181606, 0.15897451914621472, 0.004085606128130476, 0.02513331611095228, -0.1096047256888662, 0.33211707974706756, 0.007357861118363903, 0.08680477284136165, 0.23821630838218566, -0.554862026974389, 0.05508940716258127, 0.0402584445399759, -0.04115313698270494, 0.0031814713222188826, 0.01833993133389409, -0.5556511005475617, 0.009374690451163493, -0.008530805043564106, -0.17775838821576403, 0.030671587018534955, -0.001941231709111578, -0.16418321034338562, 0.08352482403769472, -0.07500720371996426, -0.05400387199508622, 0.08620485691520094, 0.11417226975591387, -0.32538421960446695, -0.10847612406389252, -0.11880557834789586, 0.07581387047291903, -0.038829352066939334, 0.009945973818338302, -0.003581300383186269, -0.014309575886188803, -0.008705864383820906, 0.06714769872864707, 0.13508749949823348, 0.00028402305745874864, -0.0334101265286779, -0.035221133387762386, -0.10533119001823939, 0.005100308231189432, 0.1284425518311433, -0.20567683598854417, -0.4313318554912483, -0.08420912357053527, 0.13596649348493464, 0.13694371031817257, 0.14571412841513237, 0.022275829687453234, 0.907390130496103, -0.07555726148808527, -0.008102465603209005, 0.24348192125277404, 0.020610504546489744, 0.00020964089048333684, -0.1420638779916257, -0.13931720787535007, -0.1895965203316524, -0.0045100686031865735, 0.11435189280137054, 0.15296163093361187, 0.06568932009481895, -0.09316409004088361, -0.002388957802422834, 0.03648816207977746, -0.010262956617325668, 0.008405438948035995, 0.19269408094458956, -0.008659258128165594, -0.0012925112071063554, 0.0007613785346542346, 0.0017092246069928848, 0.0010651000424384389, -0.0016072766237658239, 0.0007933771856438977, -0.0009103464325741185, 0.0008148087088902669, 0.0002707891633108815]


# In[9]:


fin=[]
for i in range(240):
    fin.append('')
    if x2[i][163]>18.5:
        fin[i]=np.dot(x2b[i],wb)+bb
        if fin[i]<=18.5 and fin[i]>np.dot(x2b[i],ws)+bs:
            fin[i]=np.dot(x2b[i],ws)+bs
    else:
        fin[i]=np.dot(x2s[i],ws)+bs
        if fin[i]>18.5 and fin[i]<np.dot(x2s[i],wb)+bb:
             fin[i]=np.dot(x2s[i],wb)+bb
    if fin[i]<0:
        fin[i]=0
#print(fin)


# In[12]:


sub=open(output_file_path,"w",encoding="BIG5")
sub.write('id,value\n')
for i in range(240):
    sub.write('id_'+str(i)+','+str(fin[i])+'\n')
sub.close()

